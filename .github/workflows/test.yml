name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Playwright Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: volunteer-portal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('web/package-lock.json') }}

      - name: Install Playwright Browsers
        run: |
          cd web
          npx playwright install --with-deps chromium

      - name: Setup test database
        run: |
          cd web
          cp .env.example .env
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run Playwright tests
        run: |
          cd web
          npx playwright test --shard=${{ matrix.shard }}/${{ strategy.job-total }} --project=chromium --reporter=blob

      - name: Upload blob report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: blob-report-${{ matrix.shard }}
          path: web/blob-report/
          retention-days: 1

  merge-reports:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Download all blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge test reports
        run: |
          cd web
          npx playwright merge-reports --reporter=html ../all-blob-reports

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-merged
          path: web/playwright-report/
          retention-days: 30

      - name: Run coverage tests
        if: github.event_name == 'pull_request'
        working-directory: web
        run: |
          # Run tests with coverage collection
          npm run test:e2e:coverage
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/volunteer-portal
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-ci
          NODE_ENV: test
          COVERAGE: true

      - name: Generate coverage report
        if: github.event_name == 'pull_request'
        working-directory: web
        run: |
          # Check if playwright-test-coverage generated coverage data
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "Coverage data found, generating report..."
            
            # Create markdown summary from playwright-test-coverage output
            echo "# üìä Code Coverage Report" > coverage-report.md
            echo "" >> coverage-report.md
            echo "## Coverage Summary" >> coverage-report.md
            echo "" >> coverage-report.md
            
            # Parse coverage summary and create table
            node -e "
              const fs = require('fs');
              const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = summary.total;
              
              console.log('| Metric | Coverage | Covered/Total |');
              console.log('|--------|----------|---------------|');
              console.log(\`| **Statements** | \${total.statements.pct}% | \${total.statements.covered}/\${total.statements.total} |\`);
              console.log(\`| **Branches** | \${total.branches.pct}% | \${total.branches.covered}/\${total.branches.total} |\`);
              console.log(\`| **Functions** | \${total.functions.pct}% | \${total.functions.covered}/\${total.functions.total} |\`);
              console.log(\`| **Lines** | \${total.lines.pct}% | \${total.lines.covered}/\${total.lines.total} |\`);
            " >> coverage-report.md
            
            echo "" >> coverage-report.md
            echo "## Files with Coverage" >> coverage-report.md
            echo "" >> coverage-report.md
            
            # List files with coverage (limit to top 20 to avoid too long comments)
            node -e "
              const fs = require('fs');
              const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const files = Object.keys(summary).filter(key => key !== 'total').slice(0, 20);
              
              if (files.length === 0) {
                console.log('No individual file coverage data available.');
              } else {
                files.forEach(file => {
                  const fileCov = summary[file];
                  console.log(\`- \\\`\${file}\\\` - \${fileCov.statements.pct}% statements, \${fileCov.lines.pct}% lines\`);
                });
                
                if (Object.keys(summary).length - 1 > 20) {
                  console.log(\`\n... and \${Object.keys(summary).length - 1 - 20} more files\`);
                }
              }
            " >> coverage-report.md
            
          elif [ -f "coverage/lcov.info" ]; then
            echo "LCOV coverage data found..."
            echo "# üìä Code Coverage Report" > coverage-report.md
            echo "" >> coverage-report.md
            echo "Coverage data was generated but summary is not available in the expected format." >> coverage-report.md
            echo "Check the full coverage report in the artifacts." >> coverage-report.md
            
          else
            echo "# üìä Code Coverage Report" > coverage-report.md
            echo "" >> coverage-report.md
            echo "‚ö†Ô∏è No coverage data was collected during test execution." >> coverage-report.md
            echo "" >> coverage-report.md
            echo "This may be due to:" >> coverage-report.md
            echo "- Tests not executing JavaScript application code" >> coverage-report.md
            echo "- Coverage plugin not properly configured" >> coverage-report.md
            echo "- Build optimizations removing instrumentation" >> coverage-report.md
          fi

      - name: Upload coverage reports
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            web/coverage/
            web/coverage-report.md
          retention-days: 30

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let coverageReport = '';
            try {
              coverageReport = fs.readFileSync('web/coverage-report.md', 'utf8');
            } catch (error) {
              coverageReport = '# Test Coverage Report\n\nNo coverage report generated.';
            }
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing coverage comment
            const existingComment = comments.find(comment => 
              comment.body.includes('üìä Code Coverage Report') && 
              comment.user.type === 'Bot'
            );
            
            const commentBody = `${coverageReport}
            
            ---
            *Generated from Playwright e2e tests with JavaScript coverage collection.*`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  summary:
    if: always()
    needs: [test, merge-reports]
    runs-on: ubuntu-latest
    name: Test Summary
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.merge-reports.result }}" == "failure" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          elif [[ "${{ needs.test.result }}" == "cancelled" || "${{ needs.merge-reports.result }}" == "cancelled" ]]; then
            echo "üü° Tests cancelled"
            exit 1
          else
            echo "‚úÖ All tests passed"
          fi
